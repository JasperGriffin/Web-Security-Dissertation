<?php

include_once("C:/xampp\htdocs\mvc\models\user-model.php");

class sessionHandling {

  private $conn;
  private $sql;
  private $query;

  //session length
  private $arrLength = 6;

  public function __construct() {
    $db = new user_model();
    $this->conn = $db->connect();
  }

  /*SESSION VIOLATION: session is meaningful as it's set equal to the consecutive user id*/
  /*Can either steal a user's session id by either in the URL or in the browser cookies*/
  /*Additionally, session isn't regenerated with each login*/
  public function setMeaningfulSession($id) {
    header("Location: ../../index.php?user_id=$id");
    exit();
  }

  /*Called from header.php*/
  public function getMeaningfulSession($url) {

    $id = substr($url, strrpos($url, '=') + 1);

    $username = self::getUsername($id);

    session_id($id);
    session_start();
    $_SESSION['loggedin'] = true;
    $_SESSION['userId'] = $id;
    $_SESSION['userUId'] = $username;

    header("Location: index.php?login=successful_with_id=$id");
  }

  /*SESSION VIOLATION: session has small length*/
  public function setWeakSession($id) {

    //come up with number generation
    //2^(b+1) / (2 * A * S)
    //Where b = no of bits of entropy, a = no of guesses per sec, s = no of valid tokens

    $charSet = "1234567890";
    $arr = array();
    $setLength = strlen($charSet) - 1;

    for ($i = 0; $i < $this->arrLength; $i++) {
      $rand = rand(0, $setLength);
      $arr[] = $charSet[$rand];
    }

    $token = $id . implode($arr);

    header("Location: ../../index.php?token=$token");
    exit();
  }

  /*Called from header.php*/
  public function getWeakSession($url) {

    $token = substr($url, strrpos($url, '=') + 1);
    $id = substr($token, 0, strlen($token) - $this->arrLength);

    $username = self::getUsername($id);

    session_id($token);
    session_start();
    $_SESSION['loggedin'] = true;
    $_SESSION['userId'] = $id;
    $_SESSION['userUId'] = $username;
    //self::setUsernameSession($id, $username);

    header("Location: index.php?login=successful_with_token");
  }

  public function getSecureSession($id, $username) {

    session_regenerate_id(TRUE);

    self::setSecureSettings();

    session_start();
    $_SESSION['loggedin'] = true;
    $_SESSION['userId'] = $id;

    self::setUsernameSession($id, $username);

    header("Location: ../../index.php?login_successful");
    //exit();
  }

  public function setSecureSettings() {
    /*informs browsers not to store the cookie to permanent storage.
    Therefore, when the browser is terminated, the session ID cookie is deleted immediately*/
    ini_set('session.cookie_lifetime', 0);

    /*If session.use_only_cookies=Off, the session module will use the session ID values set by
    GET/POST/URL provided the session ID cookie is uninitialized*/
    ini_set('session.use_only_cookies', 1);

    /*prevents the session module to use an uninitialized session ID.
    Put differently, the session module only accepts valid session IDs generated by the session module.
    It rejects any session ID supplied by users*/
    ini_set('session.use_strict_mode', 1);

    /*Refuses access to the session cookie from JavaScript.*/
    ini_set('session.cookie_httponly', 1);

    /*setting for deleting obsolete session ID*/
    ini_set('session.gc_maxlifetime', 60);

    /*session ID length*/
    ini_set('session.sid_length', 60);

    ini_set('session.sid_bits_per_character', 6);

    ini_set('session.hash_function', 'sha512');

    session_start();
  }

  /*Get username for $_SESSION['userUId']*/
  public function getUsername($id) {

    $this->sql = "SELECT username FROM users WHERE user_id = $id";
    $this->query = mysqli_query($this->conn, $this->sql);

    if ($this->query) {
      $row = mysqli_fetch_array($this->query);
      $username = $row['username'];
      return $username;
    }
  }

  public function setUsernameSession($id, $username) {

    //SELECT r.role_name FROM `users` u inner join user_roles r on u.user_id = r.role_id WHERE r.role_id = 1

    $this->sql = "SELECT r.role_name FROM users u inner join user_roles r on u.user_id = r.role_id WHERE r.role_id = $id";

    if ($this->conn) {

      $this->query = mysqli_query($this->conn, $this->sql);

      if ($this->query) {

        $row = mysqli_fetch_array($this->query);

        $roleName = $row['role_name'];

        if ($roleName == "Administrator") {
          $_SESSION['MAX_AUTH_LEVEL'] = true;
          $_SESSION['userUId'] = $username;
        }
        else if ($roleName = "General") {
          $_SESSION['userUId'] = $username;

        }
      }
    }
  }
}

?>
